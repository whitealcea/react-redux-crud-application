{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/events.js","components/events_index.js","components/events_new.js","components/events_show.js","serviceWorker.js","index.js"],"names":["ROOT_URL","combineReducers","events","action","type","_","mapKeys","response","data","id","form","EventsIndex","this","props","readEvents","map","event","Table","key","to","title","body","Fragment","style","position","right","bottom","containerElement","displaySelectAll","adjustForCheckbox","displayRowCheckbox","renderEvents","Component","mapDispatchToProps","dispatch","a","axios","get","connect","state","EventsNew","onSubmit","bind","field","input","label","meta","touched","error","hintText","floatingLabelText","errorText","fullWidth","values","postEvent","history","push","handleSubmit","pristine","submitting","invalid","margin","Field","name","component","renderField","disabled","post","reduxForm","validate","errors","EventsShow","onDeleteClick","match","params","getEvent","deleteEvent","putEvent","onClick","delete","put","ownProps","initialValues","enableReinitialize","Boolean","window","location","hostname","enhancer","applyMiddleware","thunk","store","createStore","reduce","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.17b4aa8d.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const READ_EVENTS = 'READ_EVENTS'\nexport const READ_EVENT = 'READ_EVENT'\nexport const CREATE_EVENT = 'CREATE_EVENT'\nexport const UPDATE_EVENT = 'UPDATE_EVENT'\nexport const DELETE_EVENT = 'DELETE_EVENT'\n\nconst ROOT_URL = 'https://udemy-utils.herokuapp.com/api/v1'\nconst QUERYSTRING = '?token=token123'\n\nexport const readEvents = () => async dispatch => {\n  const response = await axios.get(`${ROOT_URL}/events/${QUERYSTRING}`)\n  dispatch({type: READ_EVENTS, response})\n}\n\nexport const postEvent = values => async dispatch => {\n  const response = await axios.post(`${ROOT_URL}/events/${QUERYSTRING}`, values)\n  dispatch({type: CREATE_EVENT, response})\n}\n\nexport const putEvent = values => async dispatch => {\n  const response = await axios.put(`${ROOT_URL}/events/${values.id}${QUERYSTRING}`, values)\n  dispatch({type: UPDATE_EVENT, response})\n}\n\nexport const getEvent = id => async dispatch => {\n  const response = await axios.get(`${ROOT_URL}/events/${id}${QUERYSTRING}`)\n  dispatch({type: READ_EVENT, response})\n}\n\nexport const deleteEvent = id => async dispatch => {\n  await axios.delete(`${ROOT_URL}/events/${id}${QUERYSTRING}`)\n  dispatch({type: DELETE_EVENT, id})\n}","import { combineReducers } from 'redux'\nimport {reducer as form} from 'redux-form'\nimport events from './events'\n\nexport default combineReducers({events, form})","import _ from 'lodash'\nimport {\n  CREATE_EVENT,\n  READ_EVENTS,\n  READ_EVENT,\n  UPDATE_EVENT,\n  DELETE_EVENT,\n} from '../actions'\n\nexport default (events = {}, action) => {\n  switch (action.type) {\n    case READ_EVENTS:\n      return _.mapKeys(action.response.data, 'id')\n    case CREATE_EVENT:\n    case READ_EVENT:\n    case UPDATE_EVENT:\n      const data = action.response.data\n      return {...events, [data.id]:data}\n    case DELETE_EVENT:\n      delete events[action.id]\n      return {...events}\n    default:\n      return events\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport _ from 'lodash'\nimport {Link} from 'react-router-dom'\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableHeaderColumn,\n  TableRow,\n  TableRowColumn\n} from 'material-ui/Table'\nimport FloatingActionButton from 'material-ui/FloatingActionButton'\nimport ContentAdd from 'material-ui/svg-icons/content/add'\n\nimport { readEvents } from '../actions'\n\nclass EventsIndex extends Component {\n\n  componentDidMount(){\n    this.props.readEvents()\n  }\n\n  renderEvents() {\n    return _.map(this.props.events, event => (\n      <TableRow key={event.id}>\n        <TableRowColumn>{event.id}</TableRowColumn>\n        <TableRowColumn>\n          <Link to={`/events/${event.id}`} >\n            {event.title}\n          </Link>\n        </TableRowColumn>\n        <TableRowColumn>{event.body}</TableRowColumn>\n      </TableRow>\n    ))\n  }\n\n  render() {\n    const style = {\n      position : \"fixed\",\n      right : 12,\n      bottom : 12\n    }\n    return (\n      <React.Fragment>\n        <FloatingActionButton style={style} containerElement={<Link to=\"events/new\" />}>\n          <ContentAdd />\n        </FloatingActionButton>\n        <Table>\n          <TableHeader\n            displaySelectAll={false}\n            adjustForCheckbox={false}\n          >\n            <TableRow>\n              <TableHeaderColumn>ID</TableHeaderColumn>\n              <TableHeaderColumn>Title</TableHeaderColumn>\n              <TableHeaderColumn>Body</TableHeaderColumn>\n            </TableRow>\n          </TableHeader>\n\n          <TableBody\n            displayRowCheckbox={false}\n            adjustForCheckbox={false}\n          >\n            {this.renderEvents()}\n          </TableBody>\n        </Table>\n      </React.Fragment>\n      )\n  }\n}\n\nconst mapStateToProps = state => ({events: state.events})\n\nconst mapDispatchToProps = ({readEvents})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsIndex)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {Field, reduxForm} from 'redux-form'\nimport {Link} from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\n\nimport { postEvent } from '../actions'\n\nclass EventsNew extends Component {\n  constructor(props){\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n  renderField(field) {\n    const {input, type, label, meta: {touched, error}} = field\n    return (\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values)\n    this.props.history.push(\"/\")\n  }\n\n  render() {\n    const {handleSubmit, pristine, submitting, invalid} = this.props\n    const style = {margin : 12}\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField} /></div>\n        <div><Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField} /></div>\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />} />\n      </form>\n      )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n  \n  if(!values.title) errors.title = \"Enter a title, please.\"\n  if(!values.body) errors.body = \"Enter a body, please.\"\n  \n  return errors\n}\n\nconst mapDispatchToProps = ({postEvent})\n\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({validate, form:'eventNewForm'})(EventsNew)\n)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {Field, reduxForm} from 'redux-form'\nimport {Link} from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\n\nimport { getEvent, deleteEvent, putEvent } from '../actions'\n\nclass EventsShow extends Component {\n  constructor(props){\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeleteClick = this.onDeleteClick.bind(this)\n  }\n\n  componentDidMount() {\n    const {id} = this.props.match.params\n    if(id) this.props.getEvent(id)\n  }\n\n  renderField(field) {\n    const {input, type, label, meta: {touched, error}} = field\n    return (\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onDeleteClick() {\n    const {id} = this.props.match.params\n    await this.props.deleteEvent(id)\n    this.props.history.push(\"/\")\n  }\n\n  async onSubmit(values) {\n    await this.props.putEvent(values)\n    this.props.history.push(\"/\")\n  }\n\n  render() {\n    const {handleSubmit, pristine, submitting, invalid} = this.props\n    const style = {margin : 12}\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField} /></div>\n        <div><Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField} /></div>\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />} />\n        <RaisedButton label=\"Delete\" style={style} onClick={this.onDeleteClick} />\n      </form>\n      )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n  \n  if(!values.title) errors.title = \"Enter a title, please.\"\n  if(!values.body) errors.body = \"Enter a body, please.\"\n  \n  return errors\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const event = state.events[ownProps.match.params.id]\n  return {initialValues: event, event}\n}\n\nconst mapDispatchToProps = ({deleteEvent, getEvent, putEvent})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  reduxForm({validate, form:'eventShowForm', enableReinitialize: true})(EventsShow)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nimport './index.css';\nimport reduce from './reducers'\nimport EventsIndex from './components/events_index';\nimport EventsNew from './components/events_new';\nimport EventsShow from './components/events_show';\nimport * as serviceWorker from './serviceWorker';\n\nconst enhancer = process.env.NODE_ENV === 'development' ? \n  composeWithDevTools(applyMiddleware(thunk)) : applyMiddleware(thunk)\nconst store = createStore(reduce, enhancer)\n\nReactDOM.render(\n  <MuiThemeProvider>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/events/new\" component={EventsNew} />\n          <Route path=\"/events/:id\" component={EventsShow} />\n          <Route exact path=\"/\" component={EventsIndex} />\n          <Route exact path=\"/events\" component={EventsIndex} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </MuiThemeProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}